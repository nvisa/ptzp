syntax = "proto3";

package ptzp;

import "google/protobuf/empty.proto";

service PTZService {
	/// Returns information about current pan/tilt/zoom positions for a given head
	rpc GetPTZPosInfo (PtzCmdPar) returns (PTZPosInfo) {}
	/// Moves given head to left
	rpc PanLeft(PtzCmdPar) returns (PtzCommandResult) {}
	/// Moves given head to right
	rpc PanRight(PtzCmdPar) returns (PtzCommandResult) {}
	/// Stops panning of given head
	rpc PanStop(PtzCmdPar) returns (PtzCommandResult) {}
	/// Moves given head in 3D space
	rpc PanTiltAbs(PtzCmdPar) returns (PtzCommandResult) {}
	/// Moves given head to an absolute position
	rpc PanTilt2Pos(PtzCmdPar) returns (PtzCommandResult) {}
	/// Moves given head to up
	rpc TiltUp(PtzCmdPar) returns (PtzCommandResult) {}
	/// Moves given head to down
	rpc TiltDown(PtzCmdPar) returns (PtzCommandResult) {}
	/// Stops tilting of given head
	rpc TiltStop(PtzCmdPar) returns (PtzCommandResult) {}
	/// Starts zoom-in operation for given head
	rpc ZoomIn(PtzCmdPar) returns (PtzCommandResult) {}
	/// Starts zoom-out operation for given head
	rpc ZoomOut(PtzCmdPar) returns (PtzCommandResult) {}
	/// Starts any zoom operation for given head
	rpc ZoomStop(PtzCmdPar) returns (PtzCommandResult) {}
	/// Moves given head to previously saved preset location
	rpc PresetGo(PresetCmd) returns (PtzCommandResult) {}
	/// Saves current positions for given head as a preset location
	rpc PresetSave(PresetCmd) returns (PtzCommandResult) {}
	/// Deletes a given preset
	rpc PresetDelete(PresetCmd) returns (PtzCommandResult) {}
	/// Retrieves preset list
	rpc PresetGetList(PresetCmd) returns (PresetList) {}
	rpc PatrolSave(PatrolCmd) returns (PtzCommandResult) {}
	rpc PatrolDelete(PatrolCmd) returns (PtzCommandResult) {}
	rpc PatrolRun(PatrolCmd) returns (PtzCommandResult) {}
	rpc PatrolStop(PatrolCmd) returns (PtzCommandResult) {}
	rpc PatrolGetList(PatrolCmd) returns (PresetList) {}
	rpc PatrolGetDetails(PatrolCmd) returns (PatrolDefinition) {}
	rpc PatternRun(PatternCmd) returns (PtzCommandResult) {}
	rpc PatternStop(PatternCmd) returns (PtzCommandResult) {}
	rpc PatternStartRecording(PatternCmd) returns (PtzCommandResult) {}
	rpc PatternStopRecording(PatternCmd) returns (PtzCommandResult) {}
	rpc PatternDelete(PatternCmd) returns (PtzCommandResult) {}
	rpc PatternGetList(PatternCmd) returns (PresetList) {}
	rpc FocusIn(PtzCmdPar) returns (PtzCommandResult) {}
	rpc FocusOut(PtzCmdPar) returns (PtzCommandResult) {}
	rpc FocusStop(PtzCmdPar) returns (PtzCommandResult) {}
	rpc GetSettings(Settings) returns (Settings) {}
	rpc SetSettings(Settings) returns (Settings) {}
	rpc GetHeads(google.protobuf.Empty) returns (PtzHeadInfo) {}
	rpc GetCapabilityValues(CapabilityValuesRead) returns (CapabilityValuesRead) {}
	rpc SetCapabilityValues(CapabilityValuesWrite) returns (CapabilityValuesWrite) {}

	rpc GetIO(IOCmdPar) returns (IOCmdPar) {}
	rpc SetIO(IOCmdPar) returns (IOCmdPar) {}

	/* Advanced controls */
	rpc GetExposure(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetExposure(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetWhiteBalance(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetWhiteBalance(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetSaturation(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetSaturation(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetAntiFlicker(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetAntiFlicker(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetGain(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetGain(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetShutterSpeed(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetShutterSpeed(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetIris(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetIris(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetSharpness(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetSharpness(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetBrightness(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetBrightness(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetContrast(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetContrast(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetHue(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetHue(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetDefog(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetDefog(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetVideoRotate(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetVideoRotate(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetBacklight(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetBacklight(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetDayNight(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetDayNight(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc GetFocus(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc SetFocus(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc RebootSystem(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
	rpc PoweroffSystem(AdvancedCmdRequest) returns (AdvancedCmdResponse) {}
}

message AdvancedCmdRequest {
	int32 head_id = 1;
	float new_value = 2;
	bool use_raw_value = 3;
	float raw_value = 4;
}

message AdvancedCmdResponse {
	float value = 1;
	float raw_value = 2;
	bool enum_field = 3;
	repeated float supported_values = 4;
	float min = 5;
	float max = 6;
}

message IOState {
	enum OutputValue {
		LOW = 0;
		HIGH = 1;
	}
	enum Direction {
		INPUT = 0;
		OUTPUT = 1;
	}
	OutputValue value = 1;
	Direction direction = 2;
}

message IOCmdPar {
	repeated string name = 1;
	repeated IOState state = 2;
}

message PtzHeadInfo {
	repeated PtzHead list = 1;
}

message CapabilityValuesRead {
	repeated PtzHead.Capability caps = 1;
	repeated AdvancedCmdRequest values = 2;
}

message CapabilityValuesWrite {
	repeated PtzHead.Capability caps = 1;
	repeated AdvancedCmdResponse values = 2;
}

message PtzHead {
	enum Capability {
		reserved 3;
		PAN = 0;
		TILT = 1;
		ZOOM = 2;

		EXPOSURE = 100;
		WHITE_BALANCE = 101;
		SHARPNESS = 102;
		BRIGHTNESS = 103;
		CONTRAST = 104;
		HUE = 105;
		DEFOG = 106;
		VIDEO_ROTATE = 107;
		BACKLIGHT = 108;
		DAY_NIGHT = 109;
		FOCUS = 110;
		SATURATION = 111;
		ANTI_FLICKER = 112;
		GAIN = 113;
		IRIS = 114;
		SHUTTER = 115;

		REBOOT = 201;
		POWEROFF = 202;

		MOTION_DETECTION = 301;
		TAMPERING_DETECTION = 302;
		MANUAL_TRACKING = 303;
		AUTO_TRACKING = 304;
		SEMI_AUTO_TRACKING = 305;
		FACE_DETECTION = 306;
		FACE_RECOGNITION = 307;
		PANAROMA_VIEW = 308;
		SMART_MOTION = 309;
		PRIVACY_MASKING = 310;
		VIDEO_STABILIZATION = 311;
		LINE_CROSSING_DETECTION = 312;
		STOLEN_OBJECT_DETECTION = 313;
		STRAY_OBJECT_DETECTION = 314;

		KARDELEN_JOYSTICK_CONTROL = 1000;
		KARDELEN_DETECTION = 1001;
		KARDELEN_TRACKING = 1002;
		KARDELEN_SCANNING = 1003;
		KARDELEN_MISSION_EXECUTION = 1004;
		KARDELEN_ZOOM = 1005;
		KARDELEN_FOCUS = 1006;
		KARDELEN_BRIGHTNESS = 1007;
		KARDELEN_CONTRAST = 1008;
		KARDELEN_HUE = 1009;
		KARDELEN_SATURATION = 1010;
		KARDELEN_SHARPNESS = 1011;
		KARDELEN_POLARITY = 1012;
		KARDELEN_PT = 1013;
		KARDELEN_MAST = 1014;
		KARDELEN_ROI = 1015;
		KARDELEN_DAY_VIEW = 1016;
		KARDELEN_NIGHT_VIEW = 1017;
		KARDELEN_RANGE = 1018;
		KARDELEN_SENSITIVITY_ADJUSTMENT = 1019;
		KARDELEN_BORESIGHT = 1020;
		KARDELEN_DIGITAL_ZOOM = 1021;
		KARDELEN_MENU_OVER_VIDEO = 1022;
		KARDELEN_LAZER_RANGE_FINDER = 1023;
		KARDELEN_SHOW_HIDE_SYMBOLOGY = 1024;
		KARDELEN_CALIBRATION = 1025;
		KARDELEN_SHUT_DOWN = 1026;
		KARDELEN_RESTART = 1027;
		KARDELEN_AUTO_TRACK_WINDOW = 1028;
		KARDELEN_VIRTUAL_FENCE = 1029;
		KARDELEN_AUTO_TRACK_DETECTION = 1030;
		KARDELEN_NUC = 1031;
		KARDELEN_LIMIT_YAW_PITCH = 1032; //
		KARDELEN_HARD_CALIBRATION = 1033; //
		KARDELEN_HARD_LIMIT = 1034; //
		KARDELEN_ROLL = 1035;
		KARDELEN_SCENARIO = 1036;
		KARDELEN_FIRE = 1037;
		KARDELEN_HPF_GAIN = 1038;
		KARDELEN_HPF_SPATIAL = 1039;
		KARDELEN_THERMAL_STANDBY_MODES = 1040;
		KARDELEN_CHANGE_DETECTION = 1041;
		KARDELEN_SHOW_RETICLE = 1042;
		KARDELEN_OVERLAY_ON_OFF = 1043;
		KARDELEN_FOV_BASED_PT_SPEED = 1044;
		KARDELEN_VIDEO_STABILIZATION = 1045;
	}
	enum Status {
		SYNCING = 0;
		NORMAL = 1;
	}
	repeated Capability capabilities = 1;
	Status status = 2;
	int32 head_id = 3;
	Settings head_settings = 4;
}

message PtzCmdPar {
	float pan_speed = 1;
	float tilt_speed = 2;
	float zoom_speed = 3;
	float pan_abs = 4;
	float tilt_abs = 5;
	int32 head_id = 6;
}

message PresetCmd{
	int32 preset_id = 1;
	string preset_name = 2;
	int32 pt_id = 3;
	int32 z_id = 4;
}

message PresetList{
	string list = 1;
}

message PatrolCmd{
	int32 patrol_id = 1;
	string patrol_name = 2;
	string preset_list = 3;
	string interval_list = 4;
}

message PatternCmd{
	int32 pattern_id = 1;
	bytes pattern_name = 2;
}

message Settings{
	int32 head_id = 1;
	string json = 2;
}

message PtzCommandResult {
	int32 err = 1;
}

message PTZInfoQ {
	int32 dummy = 1;
}

message PTZPosInfo {
	int32 pan_pos = 1;
	int32 tilt_pos = 2;
	int32 zoom_pos = 3;
	float fovh = 4;
	float fovv = 5;
}

message PatrolDefinition {
	repeated string presets = 1;
	repeated int32 intervals = 2;
}
